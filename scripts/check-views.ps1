param(
    [string]$projectId,
    [string]$schemaPath = ""
)

if (-not $projectId) {
    Write-Error "O ID do projeto √© obrigat√≥rio. Use: .\check-views.ps1 -projectId SEU_ID_AQUI"
    return
}

Write-Host "üöÄ Iniciando a verifica√ß√£o de views para o projeto: $projectId"

# 1. Ler o schema
if (-not (Test-Path $schemaPath)) {
    Write-Error "Arquivo de schema n√£o encontrado em: $schemaPath"
    return
}
$schema = Get-Content -Path $schemaPath | ConvertFrom-Json
$viewsSchema = $schema.views

# 2. Query para buscar todos os campos e views existentes para mapeamento
$getProjectDataQuery = @'
query GetProjectData($projectId: ID!) {
  node(id: $projectId) {
    ... on ProjectV2 {
      fields(first: 100) {
        nodes {
          ... on ProjectV2FieldCommon {
            id
            name
          }
        }
      }
      views(first: 100) {
        nodes {
          id
          name
        }
      }
    }
  }
}
'@

$queryPayload = @{ query = $getProjectDataQuery; variables = @{ projectId = $projectId } } | ConvertTo-Json
Write-Host "üîç Mapeando campos e views existentes no projeto..."
$projectData = $queryPayload | gh api graphql --input - | ConvertFrom-Json

if ($null -eq $projectData.data.node) {
    Write-Error "‚ùå Falha ao buscar dados do projeto. Verifique o ID do projeto e suas permiss√µes."
    Write-Host "Resposta da API:"
    Write-Host ($projectData | ConvertTo-Json -Depth 5)
    return
}

# 3. Criar mapas de Nome para ID
$fieldNameToIdMap = @{}
foreach ($field in $projectData.data.node.fields.nodes) {
    $fieldNameToIdMap[$field.name] = $field.id
}

$viewNameToIdMap = @{}
foreach ($view in $projectData.data.node.views.nodes) {
    $viewNameToIdMap[$view.name] = $view.id
}

Write-Host "‚úÖ Mapeamento conclu√≠do."

# 4. Gerar relat√≥rio de correspond√™ncia entre as views do schema e do projeto
Write-Host "üìä Gerando relat√≥rio de views..."
$viewReport = @()

foreach ($viewSchema in $viewsSchema) {
    $viewName = $viewSchema.name
    $exists = $viewNameToIdMap.ContainsKey($viewName)
    $status = if ($exists) { "‚úÖ Encontrada" } else { "‚ùå N√£o encontrada" }
    
    $viewReport += [PSCustomObject]@{
        Nome   = $viewName
        Status = $status
        Id     = if ($exists) { $viewNameToIdMap[$viewName] } else { "N/A" }
    }
}

# Exibir relat√≥rio de views como texto simples para evitar problemas de formata√ß√£o
Write-Host "`nRelat√≥rio de Views:"
Write-Host "===================="
foreach ($item in $viewReport) {
    Write-Host "$($item.Status) | $($item.Nome) | ID: $($item.Id)"
}
Write-Host "===================="

Write-Host "`nüîî Verifica√ß√£o conclu√≠da!"
Write-Host "  ‚Ä¢ Para instru√ß√µes detalhadas sobre como criar as views manualmente, consulte:"
Write-Host "    .\docs\criar-views-manual.md"

