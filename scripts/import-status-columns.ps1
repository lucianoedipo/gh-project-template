param(
    [string]$projectId,
    [string]$schemaPath = ""
)

# Definir fun√ß√£o de fallback para o Write-Log caso ele n√£o esteja dispon√≠vel
function Write-LogFallback {
    param(
        [string]$Message,
        [string]$Level = "Info",
        [switch]$Console
    )
    
    $timestamp = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
    $logMessage = "[$timestamp] [$Level] $Message"
    
    $logDir = Join-Path $PSScriptRoot "..\logs"
    if (-not (Test-Path $logDir)) {
        New-Item -ItemType Directory -Path $logDir -Force | Out-Null
    }
    
    $logFile = Join-Path $logDir "setup.log"
    Add-Content -Path $logFile -Value $logMessage -ErrorAction SilentlyContinue
    
    if ($Console -or $Level -eq "Info") {
        Write-Host $Message
    }
    elseif ($Level -eq "Warning") {
        Write-Warning $Message
    }
    elseif ($Level -eq "Error") {
        Write-Error $Message
    }
}

# Importar m√≥dulos corretamente
$modulesPath = Join-Path $PSScriptRoot "..\modules"
Import-Module (Join-Path $modulesPath "graphql-queries.psm1") -Force
Import-Module (Join-Path $modulesPath "status-fields.psm1") -Force
Import-Module (Join-Path $modulesPath "SchemaManager.psm1") -Force

# Verificar se utils.psm1 existe e tentar import√°-lo
$utilsPath = Join-Path $modulesPath "utils.psm1"
if (Test-Path $utilsPath) {
    try {
        Import-Module $utilsPath -Force
        # Testar se a fun√ß√£o Write-Log est√° dispon√≠vel
        if (-not (Get-Command Write-Log -ErrorAction SilentlyContinue)) {
            Write-Warning "A fun√ß√£o Write-Log n√£o foi importada corretamente. Usando fallback."
            # Criar um alias para nossa fun√ß√£o de fallback
            Set-Alias -Name Write-Log -Value Write-LogFallback -Scope Script
        }
    }
    catch {
        Write-Warning "N√£o foi poss√≠vel importar o m√≥dulo utils: $($_.Exception.Message)"
        # Criar um alias para nossa fun√ß√£o de fallback
        Set-Alias -Name Write-Log -Value Write-LogFallback -Scope Script
    }
}
else {
    Write-Warning "O m√≥dulo utils.psm1 n√£o foi encontrado em $utilsPath. Usando fallback."
    # Criar um alias para nossa fun√ß√£o de fallback
    Set-Alias -Name Write-Log -Value Write-LogFallback -Scope Script
}

# Valida√ß√£o dos par√¢metros de entrada
if (-not $projectId) {
    Write-Error "O ID do projeto √© obrigat√≥rio. Use: .\import-status-columns.ps1 -projectId SEU_ID_AQUI"
    return
}

Write-Host "üöÄ Iniciando a configura√ß√£o das colunas (Status) para o projeto: $projectId"

# Carregar e validar o schema
$schemaInfo = Get-ProjectSchema -schemaPath $schemaPath
if (-not $schemaInfo) { return }
$schema = $schemaInfo.Schema

$statusFieldSchema = $schema.fields | Where-Object { $_.name -eq "Status" }

# Adicionar mais informa√ß√µes de diagn√≥stico
Write-Host "üìã Verificando schema de status..." -ForegroundColor Yellow
if ($statusFieldSchema) {
    Write-Host "‚úÖ Schema de status encontrado com $($statusFieldSchema.options.Count) op√ß√µes configuradas." -ForegroundColor Green
    Write-Host "üìä Op√ß√µes de status definidas no schema:" -ForegroundColor Cyan
    foreach ($option in $statusFieldSchema.options) {
        Write-Host "   - $($option.name) ($($option.color))" -ForegroundColor White
    }
} else {
    Write-Host "‚ùå Campo 'Status' n√£o foi encontrado no arquivo de schema." -ForegroundColor Red
    return
}

# Chamar a fun√ß√£o com modo verbose para mais diagn√≥stico
Write-Host "üîÑ Aplicando configura√ß√£o de status ao projeto..." -ForegroundColor Cyan

# Obter ID do status e verificar se √© v√°lido antes de continuar
$statusFieldId = Get-StatusFieldId -projectId $projectId
if ($statusFieldId) {
    Write-Host "üëâ Usando ID do campo Status: $statusFieldId" -ForegroundColor Cyan
    $statusResult = Update-StatusColumns -projectId $projectId -statusFieldSchema $statusFieldSchema
}
else {
    Write-Host "‚ùå N√£o foi poss√≠vel obter o ID do campo Status. A configura√ß√£o de colunas foi ignorada." -ForegroundColor Red
}

