param(
    [string]$projectId,
    [string]$schemaPath = ""
)

# Importar m√≥dulos
$modulesPath = Join-Path $PSScriptRoot "modules"
. (Join-Path $modulesPath "graphql-queries.ps1")
. (Join-Path $modulesPath "utils.ps1")
. (Join-Path $modulesPath "field-types.ps1")
. (Join-Path $modulesPath "iteration-fields.ps1")

# --- Input Validation ---
if (-not $projectId) {
    Write-Error "O ID do projeto √© obrigat√≥rio. Use: .\import-fields.ps1 -projectId SEU_ID_AQUI"
    return
}
Write-Host "üöÄ Iniciando a configura√ß√£o de campos para o projeto: $projectId" -ForegroundColor Cyan

if (-not (Test-Path $schemaPath)) {
    Write-Error "Arquivo de schema n√£o encontrado em: $schemaPath"
    return
}
$schema = Get-Content -Path $schemaPath | ConvertFrom-Json
Write-Host "‚úÖ Schema carregado com sucesso: $schemaPath" -ForegroundColor Green

# Filtra os campos, excluindo "Status" que √© tratado por outro script
$fields = $schema.fields | Where-Object { $_.name -ne "Status" }

# --- Configure Custom Fields (excluding Status and Iteration) ---
Write-Host "`nüîß Configurando campos personalizados (exceto Status e Itera√ß√£o)..." -ForegroundColor Yellow

# Criar campos regulares
Add-CustomFields -fields $fields -projectId $projectId

# --- Create Iteration Field (Sprint) ---
Write-Host "`nüìÖ Configurando campo de itera√ß√£o (Sprint)..." -ForegroundColor Yellow

if ($schema.iteration) {
    Add-IterationField -projectId $projectId -iterationConfig $schema.iteration
}
else {
    Write-Host "‚ÑπÔ∏è Nenhuma configura√ß√£o de campo de itera√ß√£o encontrada no schema. Pulando esta etapa." -ForegroundColor DarkYellow
}

Write-Host "`n‚úÖ Configura√ß√£o de campos conclu√≠da." -ForegroundColor Green