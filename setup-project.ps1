<#
.SYNOPSIS
    Automatiza a configura√ß√£o de projetos GitHub Projects.
    Cria ou configura um projeto existente, adicionando campos personalizados e colunas de status com base em um schema JSON.

.DESCRIPTION
    Este script simplifica o processo de setup de projetos GitHub Projects V2.
    Ele verifica a instala√ß√£o do GitHub CLI, carrega um schema de configura√ß√£o,
    cria um novo projeto ou utiliza um existente, e ent√£o configura os campos
    personalizados (incluindo campos de itera√ß√£o e colunas de status)
    e exibe um resumo final com os pr√≥ximos passos.

.PARAMETER owner
    O nome de usu√°rio do propriet√°rio do projeto (organiza√ß√£o ou usu√°rio).
    Se n√£o for fornecido, o script tentar√° descobrir o propriet√°rio atrav√©s do GitHub CLI.

.PARAMETER title
    O t√≠tulo do novo projeto a ser criado. Necess√°rio se -useExisting n√£o for especificado.

.PARAMETER projectId
    O ID do projeto GitHub existente a ser configurado. Usar em conjunto com -useExisting.

.PARAMETER projectNumber
    O n√∫mero do projeto GitHub existente a ser configurado (para projetos de usu√°rio ou organiza√ß√£o).
    Usar em conjunto com -useExisting se o projectId n√£o for conhecido.

.PARAMETER schemaPath
    O caminho para o arquivo JSON do schema de configura√ß√£o do projeto.
    Ex: '.\schemas\my-project-schema.schema.json'

.PARAMETER useExisting
    Um switch que indica que um projeto existente deve ser usado em vez de criar um novo.
    Requer projectId ou projectNumber.

.PARAMETER ListSchemas
    Um switch que, quando presente, lista os schemas de projeto dispon√≠veis na pasta 'schemas'
    e encerra o script.

.EXAMPLE
    .\setup-project.ps1 -title "Meu Novo Projeto Scrum" -owner "minha-organizacao" -schemaPath ".\schemas\project-schema.schema.json"
    Cria um novo projeto com o t√≠tulo especificado e configura-o usando o schema fornecido.

.EXAMPLE
    .\setup-project.ps1 -useExisting -projectId "PVT_ABCD123" -schemaPath ".\schemas\project-schema.schema.json"
    Configura um projeto existente pelo seu ID, aplicando o schema.

.EXAMPLE
    .\setup-project.ps1 -useExisting -projectNumber 123 -owner "minha-organizacao" -schemaPath ".\schemas\project-schema.schema.json"
    Configura um projeto existente pelo seu n√∫mero e propriet√°rio, aplicando o schema.

.EXAMPLE
    Get-Help .\setup-project.ps1 -Full
    Exibe a ajuda completa do script, incluindo descri√ß√£o e exemplos.

.EXAMPLE
    .\setup-project.ps1 -ListSchemas
    Lista todos os arquivos de schema JSON dispon√≠veis na pasta 'schemas'.

.NOTES
    Certifique-se de que o GitHub CLI esteja instalado e autenticado.
    As fun√ß√µes de logging e utilit√°rios s√£o importadas dos m√≥dulos 'global-functions.psm1' e 'utils.psm1'.
#>
param(
    [string]$owner = "",
    [string]$title = "",
    [string]$projectId = "",
    [string]$projectNumber = "",
    [string]$schemaPath = "",
    [switch]$useExisting = $false,
    [switch]$ListSchemas,
    [switch]$Help
)

# --- Fallback para par√¢metros desconhecidos / Help expl√≠cito ---
if ($Help -or ($args -contains "--help" -or $args -contains "-?") -and -not $ListSchemas) {
    Write-Host "Comando de ajuda reconhecido. Por favor, use 'Get-Help .\setup-project.ps1 -Full' para obter a documenta√ß√£o completa." -ForegroundColor Green
    Get-Help $PSScriptRoot\setup-project.ps1 -Full
    return
}
# -----------------------------------------------------------------

# Importar m√≥dulos com verifica√ß√£o
$modulesDir = Join-Path $PSScriptRoot "modules"
Remove-Module -Name Prerequisites -ErrorAction SilentlyContinue
Remove-Module -Name SchemaManager -ErrorAction SilentlyContinue
Remove-Module -Name ProjectManager -ErrorAction SilentlyContinue
Remove-Module -Name global-functions -ErrorAction SilentlyContinue
Remove-Module -Name utils -ErrorAction SilentlyContinue
Import-Module (Join-Path $modulesDir "Prerequisites.psm1") -Force
Import-Module (Join-Path $modulesDir "SchemaManager.psm1") -Force
Import-Module (Join-Path $modulesDir "ProjectManager.psm1") -Force
Import-Module (Join-Path $modulesDir "global-functions.psm1") -Force
Import-Module (Join-Path $modulesDir "utils.psm1") -Force

Write-Host "üîß GitHub Project Setup - Automatiza√ß√£o de configura√ß√£o de projetos" -ForegroundColor Cyan
Write-Host "=======================================================================" -ForegroundColor Cyan

# L√≥gica para listar schemas e sair
if ($ListSchemas) {
    Write-Host "`nüìù Schemas de Projeto Dispon√≠veis em '$($PSScriptRoot)\schemas\':" -ForegroundColor Cyan
    $schemasDir = Join-Path $PSScriptRoot "schemas"
    if (Test-Path $schemasDir) {
        Get-ChildItem -Path $schemasDir -Filter "*.json" | ForEach-Object {
            Write-Host "  - $($_.Name)"
        }
    } else {
        Write-Host "  Nenhum diret√≥rio 'schemas' encontrado em '$PSScriptRoot'." -ForegroundColor Yellow
    }
    Write-Host "`nUse um desses nomes com o par√¢metro -schemaPath." -ForegroundColor Green
    return
}


# 1. Verificar instala√ß√£o e autentica√ß√£o do GitHub CLI
if (-not (Test-GitHubCLI)) {
    Write-Log -Message "Pr√©-requisitos do GitHub CLI n√£o atendidos. Encerrando." -Level Error -Console
    return
}

# 2. Carregar schema
$schemaInfo = Get-ProjectSchema -schemaPath $schemaPath
if (-not $schemaInfo) {
    if (-not $schemaPath) {
        Write-Log -Message "O par√¢metro -schemaPath √© obrigat√≥rio para configurar um projeto." -Level Error -Console
        Write-Host "`n‚ùå Erro: O par√¢metro -schemaPath √© obrigat√≥rio para configurar um projeto." -ForegroundColor Red
        Write-Host "       Use 'Get-Help .\setup-project.ps1' para mais informa√ß√µes ou execute '.\setup-project.ps1 -ListSchemas' para ver as op√ß√µes." -ForegroundColor Yellow
    }
    return
}
$schemaPath = $schemaInfo.Path

# 3. Determinar se vamos usar um projeto existente ou criar um novo
$isExistingProject = $useExisting -or $projectId -or $projectNumber

if ($isExistingProject) {
    Write-Host "`nüìã Configurando projeto existente..." -ForegroundColor Yellow
    
    if (-not $owner) {
        $owner = Get-ProjectOwner -owner $owner
        if (-not $owner) {
            Write-Log -Message "N√£o foi poss√≠vel determinar o propriet√°rio do projeto." -Level Error -Console
            return
        }
    }
    
    $projectInfo = Get-ExistingProject -owner $owner -projectId $projectId -projectNumber $projectNumber
    
    if ($projectInfo.IsExisting) {
        $owner = $projectInfo.Owner
        $title = $projectInfo.Title
        $projectId = $projectInfo.ProjectId
        $projectNumber = $projectInfo.ProjectNumber
        $projectUrl = $projectInfo.ProjectUrl
        
        Write-Host "`nüîÑ Utilizando projeto existente:" -ForegroundColor Yellow
        Write-Host "   T√≠tulo: $title"
        Write-Host "   ID: $projectId"
        Write-Host "   N√∫mero: $projectNumber"
        Write-Host "   Propriet√°rio: $owner"
        Write-Host "   URL: $projectUrl"
    } else {
        if ($useExisting) {
            Write-Log -Message "Nenhum projeto existente foi selecionado ou encontrado com os par√¢metros fornecidos. Encerrando." -Level Error -Console
            Write-Host "`n‚ùå Erro: Nenhum projeto existente foi selecionado ou encontrado. Encerrando." -ForegroundColor Red
            return # Exit if -useExisting was specified and no project was found/selected
        } else {
            Write-Log -Message "Projeto existente (ID: $projectId, N√∫mero: $projectNumber, Propriet√°rio: $owner) n√£o encontrado. Tentando criar um novo." -Level Warning -Console
            $isExistingProject = $false
        }
    }
}

# 4. Se n√£o estamos usando um projeto existente, criar um novo
if (-not $isExistingProject) {
    # Removida a valida√ß√£o forte de -title aqui. O PowerShell solicitar√° se faltar.

    if (-not $owner) {
        $owner = Get-ProjectOwner -owner $owner
        if (-not $owner) {
            Write-Log -Message "N√£o foi poss√≠vel determinar o propriet√°rio do projeto." -Level Error -Console
            return
        }
    }
    
    $newProject = New-GitHubProject -owner $owner -title $title
    if (-not $newProject) {
        Write-Log -Message "Falha ao criar um novo projeto GitHub." -Level Error -Console
        return
    }
    
    $owner = $newProject.Owner
    $title = $newProject.Title
    $projectId = $newProject.ProjectId
    $projectNumber = $newProject.ProjectNumber
    $projectUrl = $newProject.ProjectUrl
}

# 5. Configurar campos personalizados
Write-Host "`nüîß Configurando campos personalizados (incluindo Itera√ß√£o e excluindo Status)..." -ForegroundColor Yellow

try {
    $importFieldsScriptPath = Join-Path $PSScriptRoot "scripts\import-fields.ps1"
    $rawFieldOutput = & $importFieldsScriptPath -projectId $projectId -schemaPath $schemaPath 6>&1 *>&1
    $fieldConfigOutput = $rawFieldOutput | Out-String
    Write-Host $fieldConfigOutput # Explicitly write to console
}
catch {
    $errorMessage = $_.Exception.Message
    Write-Log -Message "Ocorreu um erro ao configurar os campos personalizados: $errorMessage" -Level Error -Console
    Write-Host "Consulte o arquivo de log para detalhes completos: $PSScriptRoot\logs\setup.log" -ForegroundColor Yellow
    $fieldConfigOutput = "Erro: $errorMessage"
}

# 6. Configurar colunas (status)
Write-Host "`nüìä Configurando colunas (Status)..." -ForegroundColor Yellow
try {
    $importStatusScriptPath = Join-Path $PSScriptRoot "scripts\import-status-columns.ps1"
    $rawStatusOutput = & $importStatusScriptPath -projectId $projectId -schemaPath $schemaPath 6>&1 *>&1
    $statusConfigResult = $rawStatusOutput | Out-String
    Write-Host $statusConfigResult # Explicitly write to console
}
catch {
    Write-Log -Message "Erro ao configurar colunas de status: $($_.Exception.Message)" -Level Error -Console
    $statusConfigResult = "Erro: $($_.Exception.Message)"
}

# 7. Verificar views
Write-Host "`nüëÅÔ∏è Verificando views..." -ForegroundColor Yellow
try {
    $checkViewsScriptPath = Join-Path $PSScriptRoot "scripts\check-views.ps1"
    $rawViewOutput = & $checkViewsScriptPath -projectId $projectId -schemaPath $schemaPath 6>&1 *>&1
    $viewCheckResult = $rawViewOutput | Out-String
    Write-Host $viewCheckResult # Explicitly write to console
}
catch {
    Write-Log -Message "Erro ao verificar views: $($_.Exception.Message)" -Level Error -Console
    $viewCheckResult = "Erro: $($_.Exception.Message)"
}

# 8. Salvar informa√ß√µes do projeto
Save-ProjectInfo -title $title -owner $owner -projectId $projectId -projectNumber $projectNumber -projectUrl $projectUrl -fieldConfigOutput $fieldConfigOutput -statusConfigResult $statusConfigResult -viewCheckResult $viewCheckResult

# 9. Resumo final
Write-Host "`nüéâ CONFIGURA√á√ÉO CONCLU√çDA!" -ForegroundColor Green
Write-Host "=======================================================================" -ForegroundColor Cyan
Write-Host "üìù Resumo do projeto:"
Write-Host "   Nome: $title"
Write-Host "   Propriet√°rio: $owner"
Write-Host "   ID: $projectId"
Write-Host "   URL: $projectUrl"
Write-Host "`nüîç Pr√≥ximos passos:"
Write-Host "   1. Acesse o projeto na URL acima"
Write-Host "   2. Configure manualmente as views conforme instru√ß√µes em .\docs\criar-views-manual.md"
Write-Host "   3. Adicione itens ao seu projeto"
Write-Host "`n‚ú® Processo conclu√≠do com sucesso!"